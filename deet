#!/usr/bin/env bash


rebuild_pkg()
{
    filepath=$1

    cd $build_dir
    base=$(echo $filepath | awk -F "/" 'split($0, A){print A[NF]}')

    echo "Downloading PKGBUILD for <$base>"

    $(sudo deet-pkgbuild $base 2&>error.log)
    if [[ $? -ne 0 ]]
    then
        $(sudo cp error.log /var/log/deet.log)
        echo Python deet-pkgbuild failed! Check deet.log
        exit 1;
    fi

    $(makepkg -is --noconfirm 2&>error.log)
    if [[ $? -ne 0 ]]
    then
        $(sudo cp error.log /var/log/deet.log)
        echo Makepkg failed! Check deet.log
        exit 1;
    fi

    $(sudo rm -r *)
    cd .. 

    create_debug_file $filepath
}

create_debug_file()
{
    exepath=$1
    base=$(echo $exepath | awk -F "/" 'split($0, A){print A[NF]}')

    debugfile=$base.debug

    echo "creating debug file for $exepath [$debugfile]"
    $(sudo objcopy --only-keep-debug $exepath $debugfile)
    echo "Stripping $exepath...."
    $(sudo strip --strip-all $exepath)
    echo "adding gnu-debuglink $debugfile"
    $(sudo objcopy --add-gnu-debuglink=$debugfile $exepath)
    $(sudo gzip $debugfile)

    pkg_dir="$deet_db/$base"
    if [[ ! -d $pkg_dir ]]
    then
        echo Adding to database $pkg_dir
        $(sudo mkdir $pkg_dir)
    fi

    debug_zip="$debugfile.gz"
    $(sudo mv $debug_zip $pkg_dir)
    $(date +%s > timestamp)
    $(sudo cp timestamp $pkg_dir)
}

parse_file()
{
    filepath=$1

    file_output=$(file $filepath)

    if [[ $file_output =~ "with debug" ]]
    then
        echo "<$filepath>....is *not* stripped"
        create_debug_file $filepath
    elif [[ $file_output =~ "stripped" ]]
    then
        echo "<$filepath>....is stripped"
        rebuild_pkg $filepath
    else
        echo "<$filepath>....is not a binary"
    fi
}

is_path_or_file()
{

    link=$1
    if [[ $link =~ "/" ]]
    then
        echo Following symlink...$link
        check_pkg_path $link;
    else
        echo Following symlink.../usr/bin/$link
        check_pkg_file $link;
    fi
}

check_pkg_path()
{
    pkg_path=$1

    if [[ -x $pkg_path ]]
    then
        parse_file $pkg_path;
    fi
}

check_pkg_file()
{
    pkg=$1

    if [[ ! -d $build_dir ]]
    then
        $(mkdir -p $build_dir)
    fi

    # add check on posix script files
    if [[ -h /usr/bin/$pkg ]]
    then
        exepath=$(readlink /usr/bin/$pkg);
        is_path_or_file $exepath;
    elif [[ -x /usr/bin/$pkg ]]
    then
        parse_file "/usr/bin/$pkg";
    elif [[ ! -f /usr/bin/$pkg ]]
    then
        echo Invalid filename
        exit 1
    fi
}

pac_query()
{
    echo "[[ Initializing pacman package database query.... ]]";

    for pkg in $(pacman -Qnq)
    do
        if [[ -a /usr/bin/$pkg ]]
        then
            echo "[Package :: <$pkg>]";
            echo "Checking pkg binary...";
            check_pkg_file $pkg;
        fi
    done

    echo "[[ Query complete ]]";
}

deploy_debug()
{
    pkg=$1
    pkg_db="$deet_db/$pkg"

    if [[ ! -d $pkg_db ]]
    then
        echo "There are no debug symbols for package [$pkg] in database"
        exit 0
    fi

    if [[ ! -d $debug_dir ]]
    then
        $(sudo mkdir $debug_dir)
    fi

    cd $pkg_db
    echo Decompressing $pkg.debug.gz
    $(sudo gunzip "$pkg.debug.gz")
    echo Making $pkg.debug available in $debug_dir
    $(sudo cp "$pkg.debug" $debug_dir)
    $(sudo gzip "$pkg.debug")
    echo $pkg symbols now available
}

usage()
{
    echo 'deet -option <package-name>'
    echo
    echo 'Options --'
    echo
    echo '  [-h] help'
    echo 
    echo '  [-p] <package-name> will install debugging symbols'
    echo '        for <package-name> into deet database'
    echo 
    echo '  [-d] <package-name> will depoly the debugging symbols'
    echo '        for <package-name> into the debugging directory'
    echo
    echo '  [-a] will scan for *all* binaries and check if they'
    echo '       exist in the archlinux package repository.  If'
    echo '       the package is found it will be added to the'
    echo '       deet database'
    echo
}

build_dir="/tmp/DEET/build_dir"
debug_dir="/usr/bin/.debug"

deet_db="/var/lib/DEET"
deet_log="/var/log/deet.log"

if [[ ! -d $deet_db ]]
then
    $(sudo mkdir $deet_db)
fi

if [[ $# -eq 0 ]]
then
    usage
    exit 0
fi

while getopts "ad:p:" opts
do
    case $opts in

    a)
        pac_query
        ;;
    d)
        deploy_debug $OPTARG
        ;;
    p)
        check_pkg_file $OPTARG
        ;;
    ?)
        echo Invalid Option
        exit 1
        ;;
    esac
done

if [[ -d $build_dir ]]
then
    $(sudo rm -r $build_dir)
fi

