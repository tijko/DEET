#!/usr/bin/env bash


rebuild_pkg()
{
    filepath=$1

    cd $build_dir
    base=$(echo $filepath | rev | cut -d '/' -f 1 | rev)

    echo "Downloading PKGBUILD for <$base>"

    $(python ../get_pkgbuild_files.py $base 2&>>../deet.log)
    if [[ $? -ne 0 ]]
    then
        echo Python get_pkgbuild_files.py failed! Check deet.log
        exit 1;
    fi

    $(makepkg -is --noconfirm 2&>>../deet.log)
    if [[ $? -ne 0 ]]
    then
        echo Makepkg failed! Check deet.log
        exit 1;
    fi

    $(sudo rm -r *)
    cd ..

    create_debug_file $filepath
}

create_debug_file()
{
    exepath=$1
    debugfile=$(echo $exepath | rev | cut -d '/' -f 1 | rev)

    debugfile=$debugfile.debug

    echo "creating debug file for $exepath [$debugfile]"
    $(objcopy --only-keep-debug $exepath $debugfile)
    echo "Stripping $exepath...."
    $(sudo strip --strip-all $exepath)
    echo "adding gnu-debuglink $debugfile"
    $(sudo objcopy --add-gnu-debuglink=$debugfile $exepath)
    $(gzip $debugfile && sudo mv $debugfile.gz $debug_db)
}

parse_file()
{
    filepath=$1

    file_output=$(file $filepath)

    if [[ $file_output =~ "with debug" ]]
    then
        echo "<$filepath>....is *not* stripped"
        create_debug_file $filepath
    elif [[ $file_output =~ "stripped" ]]
    then
        echo "<$filepath>....is stripped"
        rebuild_pkg $filepath
    else
        echo "<$filepath>....is not a binary\n"
    fi
}

is_path_or_file()
{

    link=$1
    if [[ $link =~ "/" ]]
    then
        echo Following symlink...$link
        check_pkg_path $link;
    else
        echo Following symlink.../usr/bin/$link
        check_pkg_file $link;
    fi
}

check_pkg_path()
{
    pkg_path=$1

    if [[ -x $pkg_path ]]
    then
        parse_file $pkg_path;
    fi
}

check_pkg_file()
{
    pkg=$1

    if [[ ! -d $build_dir ]]
    then
        $(mkdir $build_dir)
    fi

    # add check on posix script files
    if [[ -h /usr/bin/$pkg ]]
    then
        exepath=$(readlink /usr/bin/$pkg);
        is_path_or_file $exepath;
    elif [[ -x /usr/bin/$pkg ]]
    then
        parse_file "/usr/bin/$pkg";
    elif [[ ! -f /usr/bin/$pkg ]]
    then
        echo Invalid filename
        exit 1
    fi
}

pac_query()
{
    echo "[[ Initializing pacman package database query.... ]]";

    for pkg in $(pacman -Qnq)
    do
        if [[ -a /usr/bin/$pkg ]]
        then
            echo "[Package :: <$pkg>]";
            echo "Checking pkg binary...";
            check_pkg_file $pkg;
        fi
    done

    echo "[[ Query complete ]]";
}

deploy_debug()
{
    pkg=$1

    if [[ ! -d $debug_dir ]]
    then
        $(sudo mkdir $debug_dir)
    fi

    for debug in $(ls $debug_db)
    do
        if [[ $debug =~ $pkg ]]
        then
            echo Decompressing $debug
            $(sudo gunzip $debug_db/$debug)
            echo Making $pkg.debug available in $debug_dir
            $(sudo cp $debug_db/$pkg.debug $debug_dir)
            $(sudo gzip $debug_db/$pkg.debug)
            echo $pkg symbols now available
        fi

        exit 0
    done

    echo $pkg no debug file found!
}

build_dir="build_dir"

debug_dir="/usr/bin/.debug"

debug_db="/var/lib/DEET"

if [[ ! -d $debug_db ]]
then
    $(sudo mkdir $debug_db)
fi

while getopts "ad:p:" opts
do
    case $opts in

    a)
        pac_query
        ;;
    d)
        deploy_debug $OPTARG
        ;;
    p)
        check_pkg_file $OPTARG
        ;;
    ?)
        echo Invalid Option
        exit 1
    esac
done

if [[ -d $build_dir ]]
then
    $(rm -r $build_dir)
fi

